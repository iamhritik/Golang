// Day 1
    go build -> compiles a bunch of GO Source Code files and creates a executable file that you can directly run in your system.
    go compile -> compiles and executes one or two files
    go fmt -> formats all the code in each file in the current dir
    go install -> compiles and installs a package
    go get -> downloads the raw source code of someone else's package
    go test -> runs any tests associated with the current project

// Day 2
    variable declaration:
        var VarName type = VarValue | GO is static Types  unlike python that is dynamic type that's why we need to define VarType at the time of declaration.| works outside of func block as well
        you can also define variable like this: VarName := "Var value 123" only within the func block
        you can also initialize a var and then later assign a value to it:
            var VarTest int
            VarTest = 32
    Basic GO data types -> bool,string,int,float64

    slices and loops:
        array - fixed length list of things and slice - an array that can grow or shrink (same type of datatype exists in it)
        slice declaration:
            cards := []string{"Ace of Diamonds", newCard()} // type should be singular
        for loop:
            for index, card := range cards { -> index of this element in the array, current card we are iterating over, take the slice of cards and loop over it
                fmt.Printlin(card) // run this one time for each card in the slice
            }

    Go is not OOriented language
    receiver function -  func (d deck) print() {} -> It means any variable of type "deck" not gets access to the "print" method and this d variable -> is like self in python and it should be 1-2 alphabet
        - By creating a new type with a function that has a receiver, we are adding a 'method' to any value of that type and we don't ever reference a receiver value as 'this' or 'self'

// Day 3
    Slices are zero-indexed, for example:
    fruits = []string{"apple","banana","grape","orange"}
    fruits[0] --> apple
    fruits[3] --> orange
    fruits[0:2] --> apple,banana // fruits[startIndexIncluding:upToNotIncluding], fruits[:2] or fruits[2:] --> grape.orange

    you can return multiple values from a func like this:
    func deal(d deck,handSize int) (deck,deck) { // over here returning 2 values of deck type
        return d[:handSize],d[handSize:]
    }

    what is byte slice ? -> string of characters changed into ascii character code (decimal)
    used os package - WriteFile func to save data in a file

// Day 4
    read data forom file using ReadFile

// Day 5
    Go testing -> is not like jasmine,selenium. To make a test, create a new file ending in _test.go
    test scenarios
        - 4 cards must be in the deck
            logic => create a new deck -> write if statement to see if deck has right no of cards -> if it doesn't,then tell go handleer that something went wrong
        - first card would be Ace of Spades
        to test any func, create a new func with name TestNewDeck

// Day  - @
    Go refers to as pass by value lang => where when you pass some value into some func - it will create a copy of that value and pass that copy to the function. [so function working on the copied data not the original one]

    We can address the above pass by value lang problem and modify the actual underlaying data structure through the use of POINTERS

    But this problem is not occurs in case of SLICE and we can directly update the original value in slice type.

    func (pointerToPerson *person) updateName(newFirstName string) - in this receiver - *person -> in this case * is not a operator that gives the value of this memory address it's pointing to but this is a type description and it means that this updateName func can only be called with a receiver of a pointer to a person [specifying that we want a type of pointer to a person]


    Problem not occurs in SLICE data type because slice is reference type but struct is not and in case of slice - it's an Array and a structure that consists of 3 elements - pointer to head, length and capacity
    length - how many values currently stored in it
    capacity - how many values it can store
    pointer to head - points to the ARRAY where it stores the actual data

    so whenever u call a function and pass slice value to it, GO behaves as pass by values lang and creates a copy of it and that copy of 3elements still points to the same ARRAY.

    Other reference types - slices,maps,channels,pointers and functions


INTERFACES - 
    we use interfaces to define a method set or a function set - kind of defining what something of type bot -> what different functions and return types it should have
    BY defining this interfaces - you are telling GO - why well anything that kind of matches this description right here of type bot is now type bot.

Routines - 
   Whenever we create a program and compile it - we automatically create one GO Routine. It takes all the lines of program and executes it one by one. -> Executes our CODE
   if u want to use a new GO Routine for a func - just use go before calling that function.
    - go checkLink(link) -> checkLink is a func
    Whenever this New GO Routine stucks in BLocking call - it notify the code that currently I;m in blocking call stage - IN the meanwhile you can execute other GO Routines.
    It basically creates a new thread for that GO Routine - that executes the code

    One CPU COre > Go Scheduler (Scheduler runs one until it finishes or makes a blocking call) -> GO Routine |  GO Routine |  GO Routine
    so this GO Scheduler runs only 1 GO Routine at a time - in case of 1 CPU Core. (By Default GO tries to use 1 CPU CORE only) 

    In case of Multiple CPU Core - we can run multiple GO Routine at the same time - parallelism

    Concurrency is not parallelism.
        - Concurrency - WE can have multiple threads executing code.If one thread blocks,another one is picked up and worked on
        - parallelism - Multiple threads executed at the exact same time - requires multiple CPUs


    Default Go Routine - Main Routine - created when we launched our program
        Other GO Routines - 
            - Child GO Routine - created by the go keyword, not getting same respect like Main GO Routine

    Note - you can use this GO keyword only in front of functions

Channels:
    - To communicate between 2 Routines and if your code is waiting for a value in any interface - it's a blocking call for that code.


Function literal
    - it's like lambda function in python or anonymous function
		go func() { // function literal
			// time.Sleep(time.Second)     //time.Second -> is duration type -> int64
			time.Sleep(5 * time.Second) //if u want to sleep for 5sec -> simply multiply this time.Second with 5 => but this is a blocking call for MAIN Routine
		}() // - this parenthesis to - call that anonymous func